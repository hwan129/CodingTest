#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
// 백준 1463

// 정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

// X가 3으로 나누어 떨어지면, 3으로 나눈다.
// X가 2로 나누어 떨어지면, 2로 나눈다.
// 1을 뺀다.
// 정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
// 다이나믹 프로그래밍

// my idea~
// 1. 짝수 홀수 - 짝수면 1을 빼기? 홀수면?
// 10 -> 1을 먼저 빼기, 9 -> 3으로 나눠야 함, 8 -> 4 -> 2 -> 1, 7 -> 6 -> 2 -> 1, 5 -> 4 -> 2 -> 1, 11 -> 10 -> 9 -> 3 -> 1
// 3으로 나눌 때,

int main()
{

    int num;
    cin >> num;

    vector<int> dp(num + 1, 0);

    for (int i = 2; i <= num; i++)
    {
        // 이전 숫자에서 1을 뺀 경우 - 기본
        dp[i] = dp[i - 1] + 1;

        // 2로 나누어 떨어지는 경우 중 작은 것
        if (i % 2 == 0)
        {
            dp[i] = min(dp[i], dp[i / 2] + 1);
        }

        // 3으로 나누어 떨어지는 경우 중 작은 것
        if (i % 3 == 0)
        {
            dp[i] = min(dp[i], dp[i / 3] + 1);
        }
    }

    cout << dp[num];

    return 0;
}